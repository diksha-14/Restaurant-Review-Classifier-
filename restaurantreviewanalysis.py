# -*- coding: utf-8 -*-
"""RestaurantReviewAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m-EQMca5X61IlKaTJlfgWUegeSeNzwU3

# Natural Language Processing

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('/content/Restaurant_Reviews (1).tsv', delimiter = '\t', quoting = 3)

"""## Cleaning the texts"""

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer 
corpus = []
for i in range(0, 1000):
  review = re.sub('[^a-zA-Z]', ' ',dataset['Review'][i])
  review = review.lower()
  review = review.split()
  ps = PorterStemmer()
  review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]
  review = ' '.join(review)
  corpus.append(review)
  print(review)

"""## Creating the Bag of Words model"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 1500)
X = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, 1].values

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

from sklearn.metrics import accuracy_score

# model
def compute_metrics(data, y_true, model_obj, model):

  # Make predictions
  y_pred = model_obj.predict(data)

  # Compute accuracy
  acc = accuracy_score(y_true = y_true, y_pred = y_pred)

  # Make DataFrame
  metrics = pd.DataFrame(data = np.array([acc]), index=[model], columns=['Accuracy Score'])
  return metrics

"""## Training the Naive Bayes model on the Training set"""

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

gnb_metrics = compute_metrics(X_test, y_test, classifier, 'Naive Bayes')
gnb_metrics

from sklearn.linear_model import LogisticRegressionCV

#modelobject
lr_reg = LogisticRegressionCV(Cs=20,cv=3,random_state=42)

#fit the model 
lr_reg.fit(X_train,y_train)

lr_metrics =  compute_metrics(X_test, y_test, lr_reg, 'LogisticRegression')
lr_metrics

from xgboost import XGBClassifier

# XGB model
xgb_model = XGBClassifier(n_estimators=200)

xgb_model.fit(X_train, y_train)

xgb_metrics = compute_metrics(X_test, y_test, xgb_model, 'XGBClassifier')
xgb_metrics

from sklearn.tree import DecisionTreeClassifier

# Model Object
dt_clf = DecisionTreeClassifier()

# Fit the object
dt_clf.fit(X_train, y_train)

dt_metrics = compute_metrics(X_test,y_test,dt_clf, "DecisionTree")
dt_metrics

"""## Predicting the Test set results"""

y_pred = classifier.predict(X_test)

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)